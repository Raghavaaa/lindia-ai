name: Deploy to Railway

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production
      
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ==========================================
  # Run Full CI First
  # ==========================================
  ci-checks:
    name: Run CI Pipeline
    uses: ./.github/workflows/ci.yml

  # ==========================================
  # Build & Test
  # ==========================================
  build:
    name: Build & Container Check
    runs-on: ubuntu-latest
    needs: ci-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Test import all modules
        run: |
          python -c "from providers import ProviderManager; print('‚úì Providers')"
          python -c "from rag import RAGPipeline; print('‚úì RAG')"
          python -c "from observability import get_logger, get_metrics; print('‚úì Observability')"
          python -c "from jobs import Job; print('‚úì Jobs')"
          echo "‚úÖ All modules import successfully"
      
      - name: Validate main app
        run: |
          python -c "import main; print('‚úì Main app validated')"

  # ==========================================
  # Deploy to Staging (Automatic)
  # ==========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Railway (Staging)
        id: deploy
        run: |
          echo "üöÄ Deploying to Railway Staging..."
          # Railway CLI deployment would go here
          # railway up --environment staging
          echo "url=https://staging.railway.app" >> $GITHUB_OUTPUT
      
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          sleep 30
      
      - name: Post-deploy smoke tests
        run: |
          python tests/ci/post_deploy_smoke.py --env staging
        env:
          STAGING_URL: ${{ steps.deploy.outputs.url }}
      
      - name: Notify deployment
        if: success()
        run: |
          echo "‚úÖ Staging deployment successful!"
          echo "üîó URL: ${{ steps.deploy.outputs.url }}"

  # ==========================================
  # Deploy to Production (Manual Approval)
  # ==========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'production'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Production deploy confirmation
        run: |
          echo "‚ö†Ô∏è  Production deployment requires manual approval"
          echo "üìã Commit: ${{ github.sha }}"
          echo "üë§ Actor: ${{ github.actor }}"
      
      - name: Run migration sanity checks
        run: |
          python tests/ci/check_migrations.py
      
      - name: Deploy to Railway (Production)
        id: deploy
        run: |
          echo "üöÄ Deploying to Railway Production..."
          # railway up --environment production
          echo "url=https://production.railway.app" >> $GITHUB_OUTPUT
      
      - name: Post-deploy validation
        run: |
          python tests/ci/post_deploy_smoke.py --env production
        env:
          PRODUCTION_URL: ${{ steps.deploy.outputs.url }}
      
      - name: Validate critical paths
        run: |
          # Test health endpoint
          curl -f ${{ steps.deploy.outputs.url }}/health || exit 1
          
          # Test metrics endpoint
          curl -f ${{ steps.deploy.outputs.url }}/metrics || exit 1
          
          echo "‚úÖ Critical endpoints validated"
      
      - name: Auto-rollback on failure
        if: failure()
        run: |
          echo "‚ùå Deployment validation failed - triggering rollback"
          # railway rollback --environment production
          exit 1
      
      - name: Notify production deployment
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "üîó URL: ${{ steps.deploy.outputs.url }}"
          echo "üìä Commit: ${{ github.sha }}"
          echo "üë§ Deployed by: ${{ github.actor }}"

  # ==========================================
  # Periodic Staging Tests
  # ==========================================
  scheduled-staging-tests:
    name: Scheduled Staging Tests
    runs-on: ubuntu-latest
    # Run every 6 hours
    if: github.event.schedule == '0 */6 * * *'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: pip install -r requirements.txt
      
      - name: Long-running RAG flow test
        run: |
          pytest tests/staging/test_long_rag_flow.py -v
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
      
      - name: Index rebuild smoke test
        run: |
          pytest tests/staging/test_index_rebuild.py -v
      
      - name: Snapshot create/restore test
        run: |
          pytest tests/staging/test_snapshot_ops.py -v
      
      - name: Cost estimate sanity check
        run: |
          pytest tests/staging/test_cost_estimates.py -v
      
      - name: Notify on regression
        if: failure()
        run: |
          echo "‚ùå Staging tests failed - regression detected"
          # Send email/slack notification

