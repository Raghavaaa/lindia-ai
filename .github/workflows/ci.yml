name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ==========================================
  # Install & Lint
  # ==========================================
  lint:
    name: Lint & Static Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black mypy pytest pytest-asyncio pytest-cov
      
      - name: Run Black (formatter check)
        run: black --check .
        continue-on-error: true
      
      - name: Run Flake8 (linting)
        run: flake8 . --max-line-length=120 --extend-ignore=E203,W503 --exclude=venv,.venv,__pycache__
        continue-on-error: true
      
      - name: Run MyPy (type checking)
        run: mypy . --ignore-missing-imports --no-strict-optional
        continue-on-error: true

  # ==========================================
  # Unit Tests
  # ==========================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=term
        env:
          ENVIRONMENT: test
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

  # ==========================================
  # Adapter Smoke Tests
  # ==========================================
  adapter-smoke-tests:
    name: Model Adapter Smoke Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
      
      - name: Run adapter smoke tests
        run: |
          pytest tests/smoke/test_adapters.py -v --tb=short
        env:
          ENVIRONMENT: test
          USE_MOCK_PROVIDERS: true

  # ==========================================
  # Integration Tests
  # ==========================================
  integration-tests:
    name: Integration Tests (Mocked Services)
    runs-on: ubuntu-latest
    needs: [unit-tests, adapter-smoke-tests]
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
      
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short
        env:
          ENVIRONMENT: test
          REDIS_URL: redis://localhost:6379
          USE_MOCK_PROVIDERS: true
          USE_MOCK_FAISS: true
          USE_MOCK_STORAGE: true

  # ==========================================
  # Secret & Config Validation
  # ==========================================
  validate-config:
    name: Validate Deployment Configuration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check required env vars exist
        run: |
          python tests/ci/check_env_config.py
      
      - name: Validate Railway config
        run: |
          if [ -f "railway.json" ]; then
            echo "✓ railway.json exists"
            python -m json.tool railway.json > /dev/null
            echo "✓ railway.json is valid JSON"
          fi
      
      - name: Validate Procfile
        run: |
          if [ ! -f "Procfile" ]; then
            echo "✗ Procfile missing"
            exit 1
          fi
          echo "✓ Procfile exists"
      
      - name: Check for leaked secrets
        run: |
          # Check for potential secrets in code
          if grep -r "sk-" --include="*.py" --exclude-dir=venv .; then
            echo "✗ Potential API key found in code"
            exit 1
          fi
          echo "✓ No leaked secrets detected"

  # ==========================================
  # Build & Dry-Run Deploy
  # ==========================================
  dry-run-deploy:
    name: Dry-Run Deploy Validation
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, validate-config]
    steps:
      - uses: actions/checkout@v4
      
      - name: Simulate Railway environment
        run: |
          python tests/ci/validate_railway_env.py
        env:
          # Check these are defined (values masked)
          PROVIDER_ORDER: "inlegalbert,deepseek,grok"
          PORT: "8080"
      
      - name: Build validation
        run: |
          echo "✓ All CI checks passed"
          echo "✓ Ready for Railway deployment"

  # ==========================================
  # All CI Checks
  # ==========================================
  ci-complete:
    name: CI Complete ✅
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, adapter-smoke-tests, integration-tests, validate-config, dry-run-deploy]
    steps:
      - name: All checks passed
        run: |
          echo "✅ All CI checks passed!"
          echo "✅ Branch is ready for deployment"

