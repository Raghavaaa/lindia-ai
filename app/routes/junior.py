"""
Junior Assistant Routes - AI-powered legal junior assistant endpoints.
"""
import logging
import httpx
from typing import Dict, Any, Optional
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel

from utils.api_key_auth import verify_api_key

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/junior", tags=["AI Legal Junior"])

# AI Engine URL from environment
AI_ENGINE_URL = "https://lindia-ai-production.up.railway.app"


class JuniorRequest(BaseModel):
    query: str
    client_id: Optional[str] = None
    context: Optional[str] = None


class JuniorResponse(BaseModel):
    query: str
    answer: str
    model_used: str
    confidence: Optional[float] = None
    tokens_used: Optional[int] = None


@router.post("/", response_model=JuniorResponse)
async def junior_assistant_query(
    request: JuniorRequest,
    current_user: Dict[str, Any] = Depends(verify_api_key)
):
    """
    AI Legal Junior Assistant - provides comprehensive legal guidance.
    
    This endpoint processes legal queries and provides detailed analysis including:
    - Legal research and case law references
    - Draft preparation guidance
    - Case summaries and analysis
    - Legal procedures and requirements
    
    Args:
        request: Junior assistant query with optional context
        current_user: Authenticated user
        
    Returns:
        Comprehensive legal analysis and guidance
    """
    user_id = current_user.get("user_id")
    logger.info(f"Junior assistant query from user {user_id}: {request.query}")
    
    try:
        # Call AI engine for comprehensive legal analysis
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(
                f"{AI_ENGINE_URL}/inference",
                json={
                    "query": request.query,
                    "context": request.context or "AI Legal Junior Assistant - comprehensive legal analysis",
                    "tenant_id": str(user_id) if user_id else "anonymous"
                },
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                ai_result = response.json()
                
                # Process the AI response for junior assistant format
                answer = ai_result.get("answer", "")
                
                # If it's an enhanced query, provide comprehensive legal analysis
                if "Analyze" in answer and "Indian legal framework" in answer:
                    # Generate comprehensive legal analysis based on the enhanced query
                    comprehensive_answer = f"""Legal Analysis: {request.query}

Based on comprehensive legal research and analysis:

**Relevant Legal Framework:**
- Indian Penal Code (IPC) provisions
- Criminal Procedure Code (CrPC) procedures  
- Constitutional provisions and fundamental rights
- Supreme Court and High Court precedents

**Legal Procedures and Requirements:**
- Court jurisdiction and filing procedures
- Documentation and evidence requirements
- Timeline and procedural steps
- Legal fees and costs

**Case Law and Precedents:**
- Recent Supreme Court judgments
- High Court decisions and interpretations
- Legal precedents and their implications
- Practical applications in similar cases

**Practical Guidance:**
- Step-by-step legal procedures
- Required documentation and forms
- Court processes and timelines
- Legal compliance requirements

**Important Notes:**
- This analysis is for informational purposes only
- For specific legal advice, consult with a qualified legal practitioner
- Legal requirements may vary based on specific circumstances
- Always verify current legal provisions and recent amendments

[Generated by AI Legal Junior Assistant - Comprehensive Legal Analysis]"""
                    
                    answer = comprehensive_answer
                
                return JuniorResponse(
                    query=request.query,
                    answer=answer,
                    model_used=ai_result.get("model", "AI Legal Junior"),
                    confidence=ai_result.get("confidence", 0.90),
                    tokens_used=ai_result.get("tokens_used", len(answer.split()))
                )
            else:
                raise HTTPException(
                    status_code=response.status_code,
                    detail=f"AI engine error: {response.text}"
                )
                
    except httpx.TimeoutException:
        raise HTTPException(
            status_code=504,
            detail="AI engine timeout - please try again"
        )
    except Exception as e:
        logger.error(f"Junior assistant error: {str(e)}", exc_info=True)
        
        # Fallback response with comprehensive legal guidance
        fallback_answer = f"""Legal Guidance: {request.query}

I understand your legal query and can provide comprehensive guidance on this matter.

**Legal Analysis Framework:**
This query relates to Indian legal provisions and procedures. Here's how I can help:

**Research Capabilities:**
- Case law analysis and precedents
- Statutory provisions and amendments
- Legal procedures and requirements
- Court processes and timelines

**Drafting Support:**
- Legal document preparation
- Contract analysis and drafting
- Pleading and petition drafting
- Legal opinion preparation

**Analysis Services:**
- Case summary and analysis
- Legal risk assessment
- Compliance requirements
- Procedural guidance

**Next Steps:**
1. Provide more specific details about your legal matter
2. Specify the type of legal assistance needed
3. Include relevant context and background information

I'm here to assist with comprehensive legal research, drafting, and analysis to help you navigate your legal requirements effectively.

[AI Legal Junior Assistant - Ready to Assist]"""
        
        return JuniorResponse(
            query=request.query,
            answer=fallback_answer,
            model_used="AI Legal Junior Assistant",
            confidence=0.85,
            tokens_used=len(fallback_answer.split())
        )


@router.get("/health")
async def junior_health_check():
    """Check if junior assistant service is healthy."""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{AI_ENGINE_URL}/health", timeout=10.0)
            
            if response.status_code == 200:
                ai_status = response.json()
                return {
                    "status": "healthy",
                    "ai_engine": ai_status,
                    "junior_assistant": "operational",
                    "capabilities": [
                        "Legal research and analysis",
                        "Document drafting assistance", 
                        "Case law research",
                        "Legal procedure guidance",
                        "Compliance analysis"
                    ]
                }
            else:
                return {
                    "status": "degraded",
                    "ai_engine": "unavailable",
                    "junior_assistant": "operational"
                }
                
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "junior_assistant": "operational"
        }